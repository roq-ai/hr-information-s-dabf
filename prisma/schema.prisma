generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee    employee[]
  job_opening job_opening[]
}

model employee {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String?            @db.Uuid
  company_id       String?            @db.Uuid
  job_title        String             @db.VarChar(255)
  salary           Int
  hire_date        DateTime           @db.Date
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  company          company?           @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vacation_request vacation_request[]
}

model job_application {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  job_opening_id String?      @db.Uuid
  guest_id       String?      @db.Uuid
  status         String       @db.VarChar(255)
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  user           user?        @relation(fields: [guest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_opening    job_opening? @relation(fields: [job_opening_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_opening {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id      String?           @db.Uuid
  title           String            @db.VarChar(255)
  description     String            @db.VarChar(255)
  requirements    String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  job_application job_application[]
  company         company?          @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  company         company[]
  employee        employee[]
  job_application job_application[]
}

model vacation_request {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_id String?   @db.Uuid
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  status      String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
